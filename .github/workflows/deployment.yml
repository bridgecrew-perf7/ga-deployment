name: Deployment

on:
  pull_request:
    types:
      - closed
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - main
  release:
    types:
      - prereleased
      - released

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
    - id: setup-node
      name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.x

  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: |
      (github.event_name == 'pull_request' || github.event_name == 'push')
    outputs:
      target-environment-name: ${{ steps.variables.outputs.target-environment-name }}
      target-environment-url: ${{ steps.variables.outputs.target-environment-url }}
    steps:
    - id: variables
      name: Variables
      uses: actions/github-script@v5
      with:
        debug: true
        github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const { eventName, runNumber, payload, ref } = context;
          let targetEnvironmentName = null;
          let targetEnvironmentURL = null;

          if (eventName === 'pull_request') {
            if (payload.action === 'opened' || payload.action === 'reopened') {
              const label = `abcd-${parseInt(Math.random() * 10).toString().padStart(3, 0)}`;

              targetEnvironmentName = label;
              targetEnvironmentURL = `${label}.sandbox.us01.dx.commercecloud.salesforce.com`;
            } else if (payload.action === 'synchronize' || payload.action === 'closed') {
              const label = payload.pull_request.labels.filter(label => label.name.match(/\w{4}-\d{3}/i))[0];

              if (typeof label !== 'undefined') {
                targetEnvironmentName = label.name;
                targetEnvironmentURL = `${label.name}.sandbox.us01.dx.commercecloud.salesforce.com`;
              }
            }
          } else if (eventName === 'push') {
            if (ref === 'refs/heads/main') {
              targetEnvironmentName = 'development';
              targetEnvironmentURL = 'development-eu02-bestseller.demandware.net';
            }
          } else if (eventName === 'release') {
            if (payload.action === 'prereleased') {
              // ?
            } else if (payload.action === 'released') {
              // ?
            }

            targetEnvironmentName = 'staging';
            targetEnvironmentURL = 'staging-eu02-bestseller.demandware.net';
          }

          core.setOutput('target-environment-name', targetEnvironmentName);
          core.info(`target-environment-name: ${targetEnvironmentName}`);
          core.setOutput('target-environment-url', targetEnvironmentURL);
          core.info(`target-environment-url: ${targetEnvironmentURL}`);

    - id: add-label
      name: Add label
      if: |
        (github.event_name == 'pull_request' && (github.event.action == 'synchronize' || github.event.action == 'opened')) 
      env:
        LABEL: ${{ steps.variables.outputs.target-environment-name }}
      uses: actions/github-script@v5
      with:
        debug: true
        github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        result-encoding: string
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: [
              `${process.env.LABEL}`
            ]
          });

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ prepare ]
    if: |
      ((github.event_name == 'pull_request' && github.event.action != 'closed') || github.event_name == 'push')
    environment:
      name: ${{ needs.prepare.outputs.target-environment-name }}
      url: ${{ format('https://{0}/on/demandware.store/Sites-Site/', needs.prepare.outputs.target-environment-url) }}
    steps:
    - id: deploy
      name: Deploy
      run: |
        printenv

  teardown:
    name: Teardown
    runs-on: ubuntu-latest
    needs: [ prepare ]
    if: |
      (github.event_name == 'pull_request' && github.event.action == 'closed')
    env:
      SFCC_TARGET_ENVIRONMENT: ${{ needs.prepare.outputs.target-environment-name }}
    steps:
    - id: inactivate-deployment
      name: Inactivate deployment
      uses: actions/github-script@v5
      with:
        debug: true
        github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        result-encoding: string
        previews: "ant-man"
        script: |
          const { CUSTOM_GITHUB_TOKEN, SFCC_TARGET_ENVIRONMENT } = process.env;
          console.log(`SFCC_TARGET_ENVIRONMENT: ${SFCC_TARGET_ENVIRONMENT}`);

          const deployments = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const deployment = deployments
            .filter(deployment => deployment.environment === SFCC_TARGET_ENVIRONMENT)[0]
            .sort((a, b) => a.created_at > b.created_at)[0];
          core.info(`deployment: ${deployment}`);

          if (deployment && 'id' in deployment) {
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'inactive'
            });
          }

    - id: remove-label
      name: Remove label
      uses: actions/github-script@v5
      with:
        debug: true
        github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        result-encoding: string
        script: |
          github.rest.issues.removeLabel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            name: `${process.env.SFCC_TARGET_ENVIRONMENT}`
          });
